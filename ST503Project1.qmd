---
title: "ST 558 Project 1"
format: html
editor: visual
---

## Data Processing

```{r}
# Load packages
library(tidyverse)
library(readxl)
library(DBI)
```

```{r}
# Read in the data
data1 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
```

#### 1. Only select the columns identified in the instructional document
```{r}
# Name the data frame
selected_data1 <- data1 |>

# Select the respective columns
  select(Area_name, STCOU, ends_with("D")) |>

# Rename the Area_name variable
  rename(area_name = Area_name)
```

#### 2. Convert the data into long format
```{r}
long_data1 <- pivot_longer(selected_data1, cols = ends_with("D"), names_to = "Survey", values_to = "Enrollment Value")
```

#### 3. Survey values
```{r}
long_data1_updated <- long_data1 |>
  
  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values
  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |>
  
  # Convert the two digit year into a four digit year and overwrite the 'Year' column
  mutate(Year = ifelse(Year > 24, Year + 1900, Year + 2000)) |>
  
  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values
  mutate(Measurement = substr(Survey, start = 1, stop = 7))
long_data1_updated
```

#### 4. Create two data sets

**Data set that contains only non-county data**
```{r}
# Identify the indices corresponding to states
county_indices <- grep(pattern = ", \\w\\w", long_data1_updated$area_name)

# Create the county data set with only non-county level data
noncounty_tibble <- long_data1_updated[-county_indices, ]

# Add a class to the tibble called 'state'
class(noncounty_tibble) <- c("state", class(noncounty_tibble))
```

**Data set that contains only county level data**
```{r}
# Create the county data set with only county level data
county_tibble <- long_data1_updated[county_indices, ]

# Add a class to the tibble called 'county'
class(county_tibble) <- c("county", class(county_tibble))
```

#### 5. Create a new variable to describe the corresponding state in the county tibble
```{r}
county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))
```

#### 6. Create a new 'division' variable for the non-county tibble
```{r}
noncounty_tibble |>
  mutate(Division = ifelse(area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"), "Division 1",
                           ifelse(area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), "Division 2",
                                  ifelse(area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"), "Division 3",
                                         ifelse(area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"), "Division 4",
                                                ifelse(area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA"), "Division 5",
                                                       ifelse(area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"), "Division 6",
                                                              ifelse(area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"), "Division 7",
                                                                     ifelse(area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"), "Division 8",
                                                                            ifelse(area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"), "Division 9", "ERROR"))))))))))
```

## Function Creation

#### 1. Function to select necessary columns and convert the data into long format (Steps 1 and 2)
```{r}
long_format_conversion <- function(df, value = "Enrollment Value") {
  selected_data <- df |>

# Select the respective columns
  select(Area_name, STCOU, ends_with("D")) |>

# Rename the Area_name variable
  rename(area_name = Area_name)
  
# Convert the data into long format
  long_data <- pivot_longer(selected_data, cols = ends_with("D"), names_to = "Survey", values_to = value)
  return(long_data)
}
```

```{r}
# Function one test
df <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
long_data2 <- long_format_conversion(df)
long_data2
```

#### 2. Function for pulling out year and measurement from the survey values (Step 3)
```{r}
survey_function <- function(long_data) {
  long_data_updated <- long_data |>
    
  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values
  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |>
    
  # Covert the two digit year into a four digit year and overwrite the 'Year' column
  mutate(Year = ifelse(Year > 25, Year + 1900, Year + 2000)) |>
    
  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values
  mutate(Measurement = substr(Survey, start = 1, stop = 7))
  return(long_data_updated)
}
```

```{r}
# Function two test
long_data_updated <- survey_function(long_data2)
```

#### 3. Function for Creating State Variable (Step 5)
```{r}
state_function <- function(county_tibble){
  new_county_tibble <- county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))
  return(new_county_tibble)
}
```

```{r}
# Function 3 Test
# state_function(county_tibble)
```

#### 4. Function for creating the division variable of the state (Step 6)
```{r}
division_function <- function(noncounty_tibble) {
  noncounty_tibble_updated <- noncounty_tibble |>
  mutate(Division = ifelse(area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"), "Division 1",
                           ifelse(area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), "Division 2",
                                  ifelse(area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"), "Division 3",
                                         ifelse(area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"), "Division 4",
                                                ifelse(area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA"), "Division 5",
                                                       ifelse(area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"), "Division 6",
                                                              ifelse(area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"), "Division 7",
                                                                     ifelse(area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"), "Division 8",
                                                                            ifelse(area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"), "Division 9", "ERROR"))))))))))
  return(noncounty_tibble_updated)
}
```

```{r}
#division_function(noncounty_tibble)
```

#### 5. Function for creating two datasets from one and adding division/state variables (Steps 4-6)
```{r}
create_datasets <- function(long_data) {
  county_indices <- grep(pattern = ", \\w\\w", long_data$area_name)
  noncounty_tibble <- long_data[-county_indices, ]
  class(noncounty_tibble) <- c("state", class(noncounty_tibble))
  county_tibble <- long_data[county_indices, ]
  class(county_tibble) <- c("county", class(county_tibble))
  final_county_tibble <- state_function(county_tibble)
  final_noncounty_tibble <- division_function(noncounty_tibble)
  return(list(county = final_county_tibble, noncounty = final_noncounty_tibble))
}
```

```{r}
create_datasets(long_data_updated)
```

## Call It and Combine Your Data

#### Create a wrapper function
```{r}
my_wrapper <- function(url, value = "Enrollment Value"){
result <- read_csv(url) |>
long_format_conversion(value = value) |>
survey_function() |>
create_datasets()
return(result)
}
```

#### Call the wrapper function on each URL
```{r}
tibble1 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
tibble2 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

#### Write a function to combine data sets
```{r}
combine_tibbles <- function (tibble1, tibble2){
  county_df <- as.data.frame(bind_rows(tibble1[[1]], tibble2[[1]]))
  noncounty_df <- as.data.frame(bind_rows(tibble1[[2]], tibble2[[2]]))
  return(list(county_df, noncounty_df))
}
```

#### Call the combine function on the tibbles
```{r}
combine_tibbles(tibble1, tibble2)
```

## Writing a Generic Function for Summarizing

#### Write the plot state function
```{r}
plot.state <- function(df, value = "Enrollment Value") {
  df |>
    summarize(mean_division = mean())
}

# plot.state <- function(df, var_name = "Enrollment Value") {

# Filter observations where division is currently "ERROR"
# df <- df |>
# filter(Division != "ERROR")

# Calculate mean enrollment value for each division and year
# mean_vals <- df|>
# group_by(Division, Year)|>
# summarize(mean_val = mean(get(var_name)))

# Plot
#plot(mean_vals, aes(x = Year, y = mean_val, group = Division, color = Division)) + geom_line() + labs(x = "Year", y = "Mean Enrollment Value", title = "Main Enrollment Value Across the Years for Each Division")

#}
```

#### Test the plot state function
```{r}
# plot(_class_state_df_here_, var_name = "Enrollment Value")
```

#### Write the plot county function
```{r}

```

#### Test the plot county function
```{r}
# plot(_class_state_df_here_, var_name = "Enrollment Value")
```

## Put It All Together

#### Run the data processing function on the 2 enrollment URLs
```{r}

```

#### Run the data combining function to make one object
```{r}

```

#### Use the plot function on the state data frame
```{r}

```

#### Use the plot function on the county data frame
```{r}
# Specify the state to "NC", the group to top, and the number to 20

# Specify the state to "SC", the group to bottom, and the number to 7

# Do not specify anything

# Specify the state to "PA", the group to top, and the number to 8

```

#### Read in similar data sets and apply the functions

**Run the data processing function**
```{r}


```

**Run the data combining function to put these data sets into one object**
```{r}

```

**Use the plot function on the state data frame**
```{r}

```

**Use the plot function on the county data frame**
```{r}
# Specify the state to "CA", the group to top, and the number to 15

# Specify the state to "TX", the group to top, and the number to 4

# Do not specify anything

# Specify the state to "NY", the group to top, and the number to 10

```
