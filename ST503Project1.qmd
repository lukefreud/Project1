---
title: "ST 558 Project 1"
format: html
editor: visual
---

## Data Processing

We will first load necessary packages and read in the data from the URL.

```{r}
# Load packages
library(tidyverse)
library(readxl)
library(DBI)
```

```{r}
# Read in the data
data1 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
```

#### 1. Only select the columns identified in the instructional document

We will select the area name, STCOU, and other columns that end with a "D". we will also rename the Area_name variable.

```{r}
# Name the tibble
selected_data1 <- data1 |>

# Select the respective columns
  select(Area_name, STCOU, ends_with("D")) |>

# Rename the Area_name variable
  rename(area_name = Area_name)
selected_data1
```

#### 2. Convert the data into long format

We will now convert our dataset into a long format instead of the wide format.

```{r}
long_data1 <- pivot_longer(selected_data1, cols = ends_with("D"), names_to = "Survey", values_to = "Enrollment Value")
long_data1
```

#### 3. Survey values

Next, we will extract the measurement and year from the survey variable and add these as columns to our dataset.

```{r}
long_data1_updated <- long_data1 |>
  
  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values
  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |>
  
  # Convert the two digit year into a four digit year and overwrite the 'Year' column
  mutate(Year = ifelse(Year > 24, Year + 1900, Year + 2000)) |>
  
  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values
  mutate(Measurement = substr(Survey, start = 1, stop = 7))
long_data1_updated
```

#### 4. Create two data sets

We will now create two datasets. One will have state data and the other will have county data in it.

**Data set that contains only non-county data**

```{r}
# Identify the indices corresponding to states
county_indices <- grep(pattern = ", \\w\\w", long_data1_updated$area_name)

# Create the county data set with only non-county level data
noncounty_tibble <- long_data1_updated[-county_indices, ]

# Add a class to the tibble called 'state'
class(noncounty_tibble) <- c("state", class(noncounty_tibble))
```

**Data set that contains only county level data**

```{r}
# Create the county data set with only county level data
county_tibble <- long_data1_updated[county_indices, ]

# Add a class to the tibble called 'county'
class(county_tibble) <- c("county", class(county_tibble))
```

#### 5. Create a new variable to describe the corresponding state in the county tibble

Here, we will create a State variable in the county dataset using the area_name variable we have.

```{r}
county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))
```

#### 6. Create a new 'division' variable for the non-county tibble

We will now create a variable corresponding to the division of each state within the state tibble. There are 9 different divisions.

```{r}
noncounty_tibble |>
  mutate(Division = ifelse(area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"), "Division 1 (New England)",
                           ifelse(area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), "Division 2 (Middle Atlantic)",
                                  ifelse(area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"), "Division 3 (East North Central)",
                                         ifelse(area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"), "Division 4 (West North Central)",
                                                ifelse(area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA"), "Division 5 (South Atlantic)",
                                                       ifelse(area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"), "Division 6 (East South Central)",
                                                              ifelse(area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"), "Division 7 (West South Central)",
                                                                     ifelse(area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"), "Division 8 (Mountain)",
                                                                            ifelse(area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"), "Division 9 (Pacific)", "ERROR"))))))))))
```

## Function Creation

In this section we will create functions to automate parts of what we did in the data processing steps.

#### Function to select necessary columns and convert the data into long format (Steps 1 and 2)

This function does steps 1 and 2 from the processing data section of this report. It selects necessary columns and makes the data into a long format.

```{r}
long_format_conversion <- function(df, value = "Enrollment Value") {
  selected_data <- df |>

# Select the respective columns
  select(Area_name, STCOU, ends_with("D")) |>

# Rename the Area_name variable
  rename(area_name = Area_name)
  
# Convert the data into long format
  long_data <- pivot_longer(selected_data, cols = ends_with("D"), names_to = "Survey", values_to = value)
  return(long_data)
}
```

#### Function for pulling out year and measurement from the survey values (Step 3)

This function does step 3 of the data processing section by adding the year and measurement variables to the dataset.

```{r}
survey_function <- function(long_data) {
  long_data_updated <- long_data |>
    
  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values
  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |>
    
  # Covert the two digit year into a four digit year and overwrite the 'Year' column
  mutate(Year = ifelse(Year > 25, Year + 1900, Year + 2000)) |>
    
  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values
  mutate(Measurement = substr(Survey, start = 1, stop = 7))
  return(long_data_updated)
}
```

#### Function for creating a state variable (Step 5)

This function does step 5 from the previous section by adding the state variable to the county tibble. It will be used within a later function where we will split datasets into county and state data.

```{r}
state_function <- function(county_tibble){
  new_county_tibble <- county_tibble |>
  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))
  return(new_county_tibble)
}
```

#### Function for creating the division variable of the state tibble (Step 6)

This function creates the division variable within the state tibble. It will also be used in the next function we create.

```{r}
division_function <- function(noncounty_tibble) {
  noncounty_tibble_updated <- noncounty_tibble |>
  mutate(Division = ifelse(area_name %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT"), "Division 1 (New England)",
                           ifelse(area_name %in% c("NEW JERSEY", "NEW YORK", "PENNSYLVANIA"), "Division 2 (Middle Atlantic)",
                                  ifelse(area_name %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN"), "Division 3 (East North Central)",
                                         ifelse(area_name %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA"), "Division 4 (West North Central)",
                                                ifelse(area_name %in% c("DELAWARE", "FLORIDA", "GEORGIA", "MARYLAND", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "DISTRICT OF COLUMBIA", "District of Columbia", "WEST VIRGINIA"), "Division 5 (South Atlantic)",
                                                       ifelse(area_name %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE"), "Division 6 (East South Central)",
                                                              ifelse(area_name %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS"), "Division 7 (West South Central)",
                                                                     ifelse(area_name %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING"), "Division 8 (Mountain)",
                                                                            ifelse(area_name %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON"), "Division 9 (Pacific)", "ERROR"))))))))))
  return(noncounty_tibble_updated)
}
```

#### Function for creating two datasets from one and adding division/state variables (Steps 4-6)

This function does step 4-6 of the data processing phase. It splits the main dataset into a state tibble and a county tibble. Next, it calls both of the previous functions written within each respective dataset to add the necessary variables.

```{r}
create_datasets <- function(long_data) {
  county_indices <- grep(pattern = ", \\w\\w", long_data$area_name)
  noncounty_tibble <- long_data[-county_indices, ]
  class(noncounty_tibble) <- c("state", class(noncounty_tibble))
  county_tibble <- long_data[county_indices, ]
  class(county_tibble) <- c("county", class(county_tibble))
  final_county_tibble <- state_function(county_tibble)
  final_noncounty_tibble <- division_function(noncounty_tibble)
  return(list(county = final_county_tibble, noncounty = final_noncounty_tibble))
}
```

#### Create a wrapper function

This wrapper function takes all of the functions we made previously and combines them into one. It will allow us to perform all of the functions simultaneously given the URL to a dataset.

```{r}
my_wrapper <- function(url, value = "Enrollment Value"){
result <- read_csv(url) |>
long_format_conversion(value = value) |>
survey_function() |>
create_datasets()
return(result)
}
```

#### Call the wrapper function on each URL

Here we will call this wrapper function on the two different URL's we were given.

```{r}
tibble1 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
tibble2 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

#### Write a function to combine data sets

This function will combine two different county datasets with each other and combine different state datasets with each other. It will return a list with two items: the combined state data frame and the combined county data frame.

```{r}
combine_tibbles <- function (tibble1, tibble2){
  county_df <- as.data.frame(bind_rows(tibble1[[1]], tibble2[[1]]))
  noncounty_df <- as.data.frame(bind_rows(tibble1[[2]], tibble2[[2]]))
  return(list(county_df, noncounty_df))
}
```

#### Call the combine function on the tibbles

Here we will combine the two tibbles generated from the wrapper functions.

```{r}
df <- combine_tibbles(tibble1, tibble2)
```

#### Write the plot state function

This function will create a new plot for the state data frame that will group by the division, create a mean for whatever value is given, and then plot the year vs. value what is given.

```{r}
plot.state <- function(df, value = "Enrollment Value") {
   updated_df <- df |>
    filter(Division != "ERROR") |>
    group_by(Division, Year) |>
    summarize(mean_stat = mean(get(value)))
  g <- ggplot(updated_df, aes(x = Year, y = mean_stat, color = Division)) 
    g + geom_line() + labs(y = paste("Mean", value)) + ggtitle(paste("Changes in", value, "Over Years"))
}
```

#### Write the plot county function

This function will create a new plot for the county dataset and is very flexible. You can input different states, number of observations, and order of sorting. The final plot will look at the change in whatever value is specified over time.

```{r}
plot.county <- function(df, state = "AL", order = "top", number = 5, value = "Enrollment Value") {
  df_updated <- df |>
    filter(State == state) |>
    group_by(area_name) |>
    summarize(county_mean_stat = mean(get(value)))
   if(order == "top") {
    df_updated <- df_updated |> arrange(desc(county_mean_stat))
  } else if(order == "bottom") {
    df_updated <- df_updated |> arrange(county_mean_stat)
  } else {
    return("Invalid order value")
  }
  df_updated <- df_updated |> slice(1:number)
  df_plot <- left_join(df_updated, df, by = "area_name")
  ggplot(df_plot, aes(x = Year, y = get(value), color = area_name)) +
    geom_line() +
    labs(y = paste(value)) +
    ggtitle(paste("Change in", value, "Over Time"))
}
```

## Put It All Together

In this section, we will run our functions we made on different URL's in order to take the raw data, put it in the correct format, and then display plots for different states, divisions, and number of observations.

#### Run the data processing function on the 2 enrollment URLs

Here we will process the data from the first 2 enrollment URL's given.

```{r}
# Run the function on enrollment URL 1
enroll1 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", value = "Enrollment Value")

# Run the function on enrollment URL 2
enroll2 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", value = "Enrollment Value")
```

#### Run the data combining function to make one object

This will combine the state data frame with the other state data frame, and the county data frame with the other county data frame.

```{r}
enroll_combo <- combine_tibbles(enroll1, enroll2)
```

#### Use the plot function on the state data frame

Here we will plot the state data frame for the combined data using our plot.state function.

```{r}
plot.state(enroll_combo[[2]])
```

#### Use the plot function on the county data frame

We will now plot the county data and give it 4 different inputs to see the flexibility of our plot.county function that we created.

```{r}
# Specify the state to "NC", the group to top, and the number to 20
plot.county(enroll_combo[[1]], state = "NC", order = "top", number = 20)

# Specify the state to "SC", the group to bottom, and the number to 7
plot.county(enroll_combo[[1]], state = "SC", order = "bottom", number = 7)

# Do not specify anything
plot.county(enroll_combo[[1]])

# Specify the state to "PA", the group to top, and the number to 8
plot.county(enroll_combo[[1]], state = "PA", order = "top", number = 8)

```

#### Read in similar data sets and apply the functions

**Run the data processing function**

In this step we will read in 4 more URL's to obtain different datasets and we will test our wrapper function on these.

```{r}
url1 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv")

url2 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv")

url3 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv")

url4 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv")
```

**Run the data combining function to put these data sets into one object**

We now will combine the data of 4 URL's that we read in and put it into one larger object. We will use the combine_tibbles function for this.

```{r}
# Combine URLs 1 and 2
combo1 <- combine_tibbles(url1, url2)

# Combine URLs 3 and 4
combo2 <- combine_tibbles(url3, url4)

# Combine all 4 URLs
url_combo <- combine_tibbles(combo1, combo2)
```

**Use the plot function on the state data frame**

We will now test out the plot.state function on the new state data frame of the combined data.

```{r}
plot.state(url_combo[[2]])
```

**Use the plot function on the county data frame**

We will now test the plot.county function with different inputs on our combined county data frame.

```{r}
# Specify the state to "CA", the group to top, and the number to 15
plot.county(url_combo[[1]], state = "CA", order = "top", number = 15)

# Specify the state to "TX", the group to top, and the number to 4
plot.county(url_combo[[1]], state = "TX", order = "top", number = 4)

# Do not specify anything
plot.county(url_combo[[1]])

# Specify the state to "NY", the group to top, and the number to 10
plot.county(url_combo[[1]], state = "NY", order = "top", number = 10)
```
