[
  {
    "objectID": "ST503Project1.html",
    "href": "ST503Project1.html",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "We will first load necessary packages and read in the data from the URL.\n\n# Load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.3\n\n\n\n# Read in the data\ndata1 &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nWe will select the area name, STCOU, and other columns that end with a “D”. we will also rename the Area_name variable.\n\n# Name the tibble\nselected_data1 &lt;- data1 |&gt;\n\n# Select the respective columns\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n\n# Rename the Area_name variable\n  rename(area_name = Area_name)\nselected_data1\n\n# A tibble: 3,198 × 12\n   area_name     STCOU EDU010187D EDU010188D EDU010189D EDU010190D EDU010191D\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 UNITED STATES 00000   40024299   39967624   40317775   40737600   41385442\n 2 ALABAMA       01000     733735     728234     730048     728252     725541\n 3 Autauga, AL   01001       6829       6900       6920       6847       7008\n 4 Baldwin, AL   01003      16417      16465      16799      17054      17479\n 5 Barbour, AL   01005       5071       5098       5068       5156       5173\n 6 Bibb, AL      01007       3557       3508       3571       3621       3652\n 7 Blount, AL    01009       7319       7223       7205       7209       7155\n 8 Bullock, AL   01011       2014       1980       1985       1983       1985\n 9 Butler, AL    01013       4640       4582       4610       4591       4544\n10 Calhoun, AL   01015      20939      20923      20907      20849      20768\n# ℹ 3,188 more rows\n# ℹ 5 more variables: EDU010192D &lt;dbl&gt;, EDU010193D &lt;dbl&gt;, EDU010194D &lt;dbl&gt;,\n#   EDU010195D &lt;dbl&gt;, EDU010196D &lt;dbl&gt;\n\n\n\n\n\nWe will now convert our dataset into a long format instead of the wide format.\n\nlong_data1 &lt;- pivot_longer(selected_data1, cols = ends_with(\"D\"), names_to = \"Survey\", values_to = \"Enrollment Value\")\nlong_data1\n\n# A tibble: 31,980 × 4\n   area_name     STCOU Survey     `Enrollment Value`\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt;\n 1 UNITED STATES 00000 EDU010187D           40024299\n 2 UNITED STATES 00000 EDU010188D           39967624\n 3 UNITED STATES 00000 EDU010189D           40317775\n 4 UNITED STATES 00000 EDU010190D           40737600\n 5 UNITED STATES 00000 EDU010191D           41385442\n 6 UNITED STATES 00000 EDU010192D           42088151\n 7 UNITED STATES 00000 EDU010193D           42724710\n 8 UNITED STATES 00000 EDU010194D           43369917\n 9 UNITED STATES 00000 EDU010195D           43993459\n10 UNITED STATES 00000 EDU010196D           44715737\n# ℹ 31,970 more rows\n\n\n\n\n\nNext, we will extract the measurement and year from the survey variable and add these as columns to our dataset.\n\nlong_data1_updated &lt;- long_data1 |&gt;\n  \n  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values\n  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |&gt;\n  \n  # Convert the two digit year into a four digit year and overwrite the 'Year' column\n  mutate(Year = ifelse(Year &gt; 24, Year + 1900, Year + 2000)) |&gt;\n  \n  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values\n  mutate(Measurement = substr(Survey, start = 1, stop = 7))\nlong_data1_updated\n\n# A tibble: 31,980 × 6\n   area_name     STCOU Survey     `Enrollment Value`  Year Measurement\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n 1 UNITED STATES 00000 EDU010187D           40024299  1987 EDU0101    \n 2 UNITED STATES 00000 EDU010188D           39967624  1988 EDU0101    \n 3 UNITED STATES 00000 EDU010189D           40317775  1989 EDU0101    \n 4 UNITED STATES 00000 EDU010190D           40737600  1990 EDU0101    \n 5 UNITED STATES 00000 EDU010191D           41385442  1991 EDU0101    \n 6 UNITED STATES 00000 EDU010192D           42088151  1992 EDU0101    \n 7 UNITED STATES 00000 EDU010193D           42724710  1993 EDU0101    \n 8 UNITED STATES 00000 EDU010194D           43369917  1994 EDU0101    \n 9 UNITED STATES 00000 EDU010195D           43993459  1995 EDU0101    \n10 UNITED STATES 00000 EDU010196D           44715737  1996 EDU0101    \n# ℹ 31,970 more rows\n\n\n\n\n\nWe will now create two datasets. One will have state data and the other will have county data in it.\nData set that contains only non-county data\n\n# Identify the indices corresponding to states\ncounty_indices &lt;- grep(pattern = \", \\\\w\\\\w\", long_data1_updated$area_name)\n\n# Create the county data set with only non-county level data\nnoncounty_tibble &lt;- long_data1_updated[-county_indices, ]\n\n# Add a class to the tibble called 'state'\nclass(noncounty_tibble) &lt;- c(\"state\", class(noncounty_tibble))\n\nData set that contains only county level data\n\n# Create the county data set with only county level data\ncounty_tibble &lt;- long_data1_updated[county_indices, ]\n\n# Add a class to the tibble called 'county'\nclass(county_tibble) &lt;- c(\"county\", class(county_tibble))\n\n\n\n\nHere, we will create a State variable in the county dataset using the area_name variable we have.\n\ncounty_tibble |&gt;\n  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))\n\n# A tibble: 31,450 × 7\n   area_name   STCOU Survey     `Enrollment Value`  Year Measurement State\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D               6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D               6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D               6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D               6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D               7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D               7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D               7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D               7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D               7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D               7834  1996 EDU0101     AL   \n# ℹ 31,440 more rows\n\n\n\n\n\nWe will now create a variable corresponding to the division of each state within the state tibble. There are 9 different divisions.\n\nnoncounty_tibble |&gt;\n  mutate(Division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"Division 1 (New England)\",\n                           ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Division 2 (Middle Atlantic)\",\n                                  ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"Division 3 (East North Central)\",\n                                         ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"Division 4 (West North Central)\",\n                                                ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"Division 5 (South Atlantic)\",\n                                                       ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"Division 6 (East South Central)\",\n                                                              ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"Division 7 (West South Central)\",\n                                                                     ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Division 8 (Mountain)\",\n                                                                            ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Division 9 (Pacific)\", \"ERROR\"))))))))))\n\n# A tibble: 530 × 7\n   area_name     STCOU Survey     `Enrollment Value`  Year Measurement Division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D           40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D           39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D           40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D           40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D           41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D           42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D           42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D           43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D           43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D           44715737  1996 EDU0101     ERROR   \n# ℹ 520 more rows\n\n\n\n\n\n\nIn this section we will create functions to automate parts of what we did in the data processing steps.\n\n\nThis function does steps 1 and 2 from the processing data section of this report. It selects necessary columns and makes the data into a long format.\n\nlong_format_conversion &lt;- function(df, value = \"Enrollment Value\") {\n  selected_data &lt;- df |&gt;\n\n# Select the respective columns\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n\n# Rename the Area_name variable\n  rename(area_name = Area_name)\n  \n# Convert the data into long format\n  long_data &lt;- pivot_longer(selected_data, cols = ends_with(\"D\"), names_to = \"Survey\", values_to = value)\n  return(long_data)\n}\n\n\n\n\nThis function does step 3 of the data processing section by adding the year and measurement variables to the dataset.\n\nsurvey_function &lt;- function(long_data) {\n  long_data_updated &lt;- long_data |&gt;\n    \n  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values\n  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |&gt;\n    \n  # Covert the two digit year into a four digit year and overwrite the 'Year' column\n  mutate(Year = ifelse(Year &gt; 25, Year + 1900, Year + 2000)) |&gt;\n    \n  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values\n  mutate(Measurement = substr(Survey, start = 1, stop = 7))\n  return(long_data_updated)\n}\n\n\n\n\nThis function does step 5 from the previous section by adding the state variable to the county tibble. It will be used within a later function where we will split datasets into county and state data.\n\nstate_function &lt;- function(county_tibble){\n  new_county_tibble &lt;- county_tibble |&gt;\n  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))\n  return(new_county_tibble)\n}\n\n\n\n\nThis function creates the division variable within the state tibble. It will also be used in the next function we create.\n\ndivision_function &lt;- function(noncounty_tibble) {\n  noncounty_tibble_updated &lt;- noncounty_tibble |&gt;\n  mutate(Division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"Division 1 (New England)\",\n                           ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Division 2 (Middle Atlantic)\",\n                                  ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"Division 3 (East North Central)\",\n                                         ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"Division 4 (West North Central)\",\n                                                ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"Division 5 (South Atlantic)\",\n                                                       ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"Division 6 (East South Central)\",\n                                                              ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"Division 7 (West South Central)\",\n                                                                     ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Division 8 (Mountain)\",\n                                                                            ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Division 9 (Pacific)\", \"ERROR\"))))))))))\n  return(noncounty_tibble_updated)\n}\n\n\n\n\nThis function does step 4-6 of the data processing phase. It splits the main dataset into a state tibble and a county tibble. Next, it calls both of the previous functions written within each respective dataset to add the necessary variables.\n\ncreate_datasets &lt;- function(long_data) {\n  county_indices &lt;- grep(pattern = \", \\\\w\\\\w\", long_data$area_name)\n  noncounty_tibble &lt;- long_data[-county_indices, ]\n  class(noncounty_tibble) &lt;- c(\"state\", class(noncounty_tibble))\n  county_tibble &lt;- long_data[county_indices, ]\n  class(county_tibble) &lt;- c(\"county\", class(county_tibble))\n  final_county_tibble &lt;- state_function(county_tibble)\n  final_noncounty_tibble &lt;- division_function(noncounty_tibble)\n  return(list(county = final_county_tibble, noncounty = final_noncounty_tibble))\n}\n\n\n\n\nThis wrapper function takes all of the functions we made previously and combines them into one. It will allow us to perform all of the functions simultaneously given the URL to a dataset.\n\nmy_wrapper &lt;- function(url, value = \"Enrollment Value\"){\nresult &lt;- read_csv(url) |&gt;\nlong_format_conversion(value = value) |&gt;\nsurvey_function() |&gt;\ncreate_datasets()\nreturn(result)\n}\n\n\n\n\nHere we will call this wrapper function on the two different URL’s we were given.\n\ntibble1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntibble2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThis function will combine two different county datasets with each other and combine different state datasets with each other. It will return a list with two items: the combined state data frame and the combined county data frame.\n\ncombine_tibbles &lt;- function (tibble1, tibble2){\n  county_df &lt;- as.data.frame(bind_rows(tibble1[[1]], tibble2[[1]]))\n  noncounty_df &lt;- as.data.frame(bind_rows(tibble1[[2]], tibble2[[2]]))\n  return(list(county_df, noncounty_df))\n}\n\n\n\n\nHere we will combine the two tibbles generated from the wrapper functions.\n\ndf &lt;- combine_tibbles(tibble1, tibble2)\n\n\n\n\nThis function will create a new plot for the state data frame that will group by the division, create a mean for whatever value is given, and then plot the year vs. value what is given.\n\nplot.state &lt;- function(df, value = \"Enrollment Value\") {\n   updated_df &lt;- df |&gt;\n    filter(Division != \"ERROR\") |&gt;\n    group_by(Division, Year) |&gt;\n    summarize(mean_stat = mean(get(value)))\n  g &lt;- ggplot(updated_df, aes(x = Year, y = mean_stat, color = Division)) \n    g + geom_line() + labs(y = paste(\"Mean\", value)) + ggtitle(paste(\"Changes in\", value, \"Over Years\"))\n}\n\n\n\n\nThis function will create a new plot for the county dataset and is very flexible. You can input different states, number of observations, and order of sorting. The final plot will look at the change in whatever value is specified over time.\n\nplot.county &lt;- function(df, state = \"AL\", order = \"top\", number = 5, value = \"Enrollment Value\") {\n  df_updated &lt;- df |&gt;\n    filter(State == state) |&gt;\n    group_by(area_name) |&gt;\n    summarize(county_mean_stat = mean(get(value)))\n   if(order == \"top\") {\n    df_updated &lt;- df_updated |&gt; arrange(desc(county_mean_stat))\n  } else if(order == \"bottom\") {\n    df_updated &lt;- df_updated |&gt; arrange(county_mean_stat)\n  } else {\n    return(\"Invalid order value\")\n  }\n  df_updated &lt;- df_updated |&gt; slice(1:number)\n  df_plot &lt;- left_join(df_updated, df, by = \"area_name\")\n  ggplot(df_plot, aes(x = Year, y = get(value), color = area_name)) +\n    geom_line() +\n    labs(y = paste(value)) +\n    ggtitle(paste(\"Change in\", value, \"Over Time\"))\n}\n\n\n\n\n\nIn this section, we will run our functions we made on different URL’s in order to take the raw data, put it in the correct format, and then display plots for different states, divisions, and number of observations.\n\n\nHere we will process the data from the first 2 enrollment URL’s given.\n\n# Run the function on enrollment URL 1\nenroll1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", value = \"Enrollment Value\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Run the function on enrollment URL 2\nenroll2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", value = \"Enrollment Value\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThis will combine the state data frame with the other state data frame, and the county data frame with the other county data frame.\n\nenroll_combo &lt;- combine_tibbles(enroll1, enroll2)\n\n\n\n\nHere we will plot the state data frame for the combined data using our plot.state function.\n\nplot.state(enroll_combo[[2]])\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\nWe will now plot the county data and give it 4 different inputs to see the flexibility of our plot.county function that we created.\n\n# Specify the state to \"NC\", the group to top, and the number to 20\nplot.county(enroll_combo[[1]], state = \"NC\", order = \"top\", number = 20)\n\n\n\n\n\n\n\n# Specify the state to \"SC\", the group to bottom, and the number to 7\nplot.county(enroll_combo[[1]], state = \"SC\", order = \"bottom\", number = 7)\n\n\n\n\n\n\n\n# Do not specify anything\nplot.county(enroll_combo[[1]])\n\n\n\n\n\n\n\n# Specify the state to \"PA\", the group to top, and the number to 8\nplot.county(enroll_combo[[1]], state = \"PA\", order = \"top\", number = 8)\n\n\n\n\n\n\n\n\n\n\n\nRun the data processing function\nIn this step we will read in 4 more URL’s to obtain different datasets and we will test our wrapper function on these.\n\nurl1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST015171N1, PST015171N2, PST015172N1, PST015172...\ndbl (20): PST015171F, PST015171D, PST015172F, PST015172D, PST015173F, PST015...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST025182N1, PST025182N2, PST025183N1, PST025183...\ndbl (20): PST025182F, PST025182D, PST025183F, PST025183D, PST025184F, PST025...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl3 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST035191N1, PST035191N2, PST035192N1, PST035192...\ndbl (20): PST035191F, PST035191D, PST035192F, PST035192D, PST035193F, PST035...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl4 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST045200N1, PST045200N2, PST045201N1, PST045201...\ndbl (20): PST045200F, PST045200D, PST045201F, PST045201D, PST045202F, PST045...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nRun the data combining function to put these data sets into one object\nWe now will combine the data of 4 URL’s that we read in and put it into one larger object. We will use the combine_tibbles function for this.\n\n# Combine URLs 1 and 2\ncombo1 &lt;- combine_tibbles(url1, url2)\n\n# Combine URLs 3 and 4\ncombo2 &lt;- combine_tibbles(url3, url4)\n\n# Combine all 4 URLs\nurl_combo &lt;- combine_tibbles(combo1, combo2)\n\nUse the plot function on the state data frame\nWe will now test out the plot.state function on the new state data frame of the combined data.\n\nplot.state(url_combo[[2]])\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nUse the plot function on the county data frame\nWe will now test the plot.county function with different inputs on our combined county data frame.\n\n# Specify the state to \"CA\", the group to top, and the number to 15\nplot.county(url_combo[[1]], state = \"CA\", order = \"top\", number = 15)\n\n\n\n\n\n\n\n# Specify the state to \"TX\", the group to top, and the number to 4\nplot.county(url_combo[[1]], state = \"TX\", order = \"top\", number = 4)\n\n\n\n\n\n\n\n# Do not specify anything\nplot.county(url_combo[[1]])\n\n\n\n\n\n\n\n# Specify the state to \"NY\", the group to top, and the number to 10\nplot.county(url_combo[[1]], state = \"NY\", order = \"top\", number = 10)"
  },
  {
    "objectID": "ST503Project1.html#data-processing",
    "href": "ST503Project1.html#data-processing",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "We will first load necessary packages and read in the data from the URL.\n\n# Load packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.3\n\n\n\n# Read in the data\ndata1 &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nWe will select the area name, STCOU, and other columns that end with a “D”. we will also rename the Area_name variable.\n\n# Name the tibble\nselected_data1 &lt;- data1 |&gt;\n\n# Select the respective columns\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n\n# Rename the Area_name variable\n  rename(area_name = Area_name)\nselected_data1\n\n# A tibble: 3,198 × 12\n   area_name     STCOU EDU010187D EDU010188D EDU010189D EDU010190D EDU010191D\n   &lt;chr&gt;         &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 UNITED STATES 00000   40024299   39967624   40317775   40737600   41385442\n 2 ALABAMA       01000     733735     728234     730048     728252     725541\n 3 Autauga, AL   01001       6829       6900       6920       6847       7008\n 4 Baldwin, AL   01003      16417      16465      16799      17054      17479\n 5 Barbour, AL   01005       5071       5098       5068       5156       5173\n 6 Bibb, AL      01007       3557       3508       3571       3621       3652\n 7 Blount, AL    01009       7319       7223       7205       7209       7155\n 8 Bullock, AL   01011       2014       1980       1985       1983       1985\n 9 Butler, AL    01013       4640       4582       4610       4591       4544\n10 Calhoun, AL   01015      20939      20923      20907      20849      20768\n# ℹ 3,188 more rows\n# ℹ 5 more variables: EDU010192D &lt;dbl&gt;, EDU010193D &lt;dbl&gt;, EDU010194D &lt;dbl&gt;,\n#   EDU010195D &lt;dbl&gt;, EDU010196D &lt;dbl&gt;\n\n\n\n\n\nWe will now convert our dataset into a long format instead of the wide format.\n\nlong_data1 &lt;- pivot_longer(selected_data1, cols = ends_with(\"D\"), names_to = \"Survey\", values_to = \"Enrollment Value\")\nlong_data1\n\n# A tibble: 31,980 × 4\n   area_name     STCOU Survey     `Enrollment Value`\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt;\n 1 UNITED STATES 00000 EDU010187D           40024299\n 2 UNITED STATES 00000 EDU010188D           39967624\n 3 UNITED STATES 00000 EDU010189D           40317775\n 4 UNITED STATES 00000 EDU010190D           40737600\n 5 UNITED STATES 00000 EDU010191D           41385442\n 6 UNITED STATES 00000 EDU010192D           42088151\n 7 UNITED STATES 00000 EDU010193D           42724710\n 8 UNITED STATES 00000 EDU010194D           43369917\n 9 UNITED STATES 00000 EDU010195D           43993459\n10 UNITED STATES 00000 EDU010196D           44715737\n# ℹ 31,970 more rows\n\n\n\n\n\nNext, we will extract the measurement and year from the survey variable and add these as columns to our dataset.\n\nlong_data1_updated &lt;- long_data1 |&gt;\n  \n  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values\n  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |&gt;\n  \n  # Convert the two digit year into a four digit year and overwrite the 'Year' column\n  mutate(Year = ifelse(Year &gt; 24, Year + 1900, Year + 2000)) |&gt;\n  \n  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values\n  mutate(Measurement = substr(Survey, start = 1, stop = 7))\nlong_data1_updated\n\n# A tibble: 31,980 × 6\n   area_name     STCOU Survey     `Enrollment Value`  Year Measurement\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      \n 1 UNITED STATES 00000 EDU010187D           40024299  1987 EDU0101    \n 2 UNITED STATES 00000 EDU010188D           39967624  1988 EDU0101    \n 3 UNITED STATES 00000 EDU010189D           40317775  1989 EDU0101    \n 4 UNITED STATES 00000 EDU010190D           40737600  1990 EDU0101    \n 5 UNITED STATES 00000 EDU010191D           41385442  1991 EDU0101    \n 6 UNITED STATES 00000 EDU010192D           42088151  1992 EDU0101    \n 7 UNITED STATES 00000 EDU010193D           42724710  1993 EDU0101    \n 8 UNITED STATES 00000 EDU010194D           43369917  1994 EDU0101    \n 9 UNITED STATES 00000 EDU010195D           43993459  1995 EDU0101    \n10 UNITED STATES 00000 EDU010196D           44715737  1996 EDU0101    \n# ℹ 31,970 more rows\n\n\n\n\n\nWe will now create two datasets. One will have state data and the other will have county data in it.\nData set that contains only non-county data\n\n# Identify the indices corresponding to states\ncounty_indices &lt;- grep(pattern = \", \\\\w\\\\w\", long_data1_updated$area_name)\n\n# Create the county data set with only non-county level data\nnoncounty_tibble &lt;- long_data1_updated[-county_indices, ]\n\n# Add a class to the tibble called 'state'\nclass(noncounty_tibble) &lt;- c(\"state\", class(noncounty_tibble))\n\nData set that contains only county level data\n\n# Create the county data set with only county level data\ncounty_tibble &lt;- long_data1_updated[county_indices, ]\n\n# Add a class to the tibble called 'county'\nclass(county_tibble) &lt;- c(\"county\", class(county_tibble))\n\n\n\n\nHere, we will create a State variable in the county dataset using the area_name variable we have.\n\ncounty_tibble |&gt;\n  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))\n\n# A tibble: 31,450 × 7\n   area_name   STCOU Survey     `Enrollment Value`  Year Measurement State\n   &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;\n 1 Autauga, AL 01001 EDU010187D               6829  1987 EDU0101     AL   \n 2 Autauga, AL 01001 EDU010188D               6900  1988 EDU0101     AL   \n 3 Autauga, AL 01001 EDU010189D               6920  1989 EDU0101     AL   \n 4 Autauga, AL 01001 EDU010190D               6847  1990 EDU0101     AL   \n 5 Autauga, AL 01001 EDU010191D               7008  1991 EDU0101     AL   \n 6 Autauga, AL 01001 EDU010192D               7137  1992 EDU0101     AL   \n 7 Autauga, AL 01001 EDU010193D               7152  1993 EDU0101     AL   \n 8 Autauga, AL 01001 EDU010194D               7381  1994 EDU0101     AL   \n 9 Autauga, AL 01001 EDU010195D               7568  1995 EDU0101     AL   \n10 Autauga, AL 01001 EDU010196D               7834  1996 EDU0101     AL   \n# ℹ 31,440 more rows\n\n\n\n\n\nWe will now create a variable corresponding to the division of each state within the state tibble. There are 9 different divisions.\n\nnoncounty_tibble |&gt;\n  mutate(Division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"Division 1 (New England)\",\n                           ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Division 2 (Middle Atlantic)\",\n                                  ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"Division 3 (East North Central)\",\n                                         ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"Division 4 (West North Central)\",\n                                                ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"Division 5 (South Atlantic)\",\n                                                       ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"Division 6 (East South Central)\",\n                                                              ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"Division 7 (West South Central)\",\n                                                                     ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Division 8 (Mountain)\",\n                                                                            ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Division 9 (Pacific)\", \"ERROR\"))))))))))\n\n# A tibble: 530 × 7\n   area_name     STCOU Survey     `Enrollment Value`  Year Measurement Division\n   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;                   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   \n 1 UNITED STATES 00000 EDU010187D           40024299  1987 EDU0101     ERROR   \n 2 UNITED STATES 00000 EDU010188D           39967624  1988 EDU0101     ERROR   \n 3 UNITED STATES 00000 EDU010189D           40317775  1989 EDU0101     ERROR   \n 4 UNITED STATES 00000 EDU010190D           40737600  1990 EDU0101     ERROR   \n 5 UNITED STATES 00000 EDU010191D           41385442  1991 EDU0101     ERROR   \n 6 UNITED STATES 00000 EDU010192D           42088151  1992 EDU0101     ERROR   \n 7 UNITED STATES 00000 EDU010193D           42724710  1993 EDU0101     ERROR   \n 8 UNITED STATES 00000 EDU010194D           43369917  1994 EDU0101     ERROR   \n 9 UNITED STATES 00000 EDU010195D           43993459  1995 EDU0101     ERROR   \n10 UNITED STATES 00000 EDU010196D           44715737  1996 EDU0101     ERROR   \n# ℹ 520 more rows"
  },
  {
    "objectID": "ST503Project1.html#function-creation",
    "href": "ST503Project1.html#function-creation",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "In this section we will create functions to automate parts of what we did in the data processing steps.\n\n\nThis function does steps 1 and 2 from the processing data section of this report. It selects necessary columns and makes the data into a long format.\n\nlong_format_conversion &lt;- function(df, value = \"Enrollment Value\") {\n  selected_data &lt;- df |&gt;\n\n# Select the respective columns\n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n\n# Rename the Area_name variable\n  rename(area_name = Area_name)\n  \n# Convert the data into long format\n  long_data &lt;- pivot_longer(selected_data, cols = ends_with(\"D\"), names_to = \"Survey\", values_to = value)\n  return(long_data)\n}\n\n\n\n\nThis function does step 3 of the data processing section by adding the year and measurement variables to the dataset.\n\nsurvey_function &lt;- function(long_data) {\n  long_data_updated &lt;- long_data |&gt;\n    \n  # Extract the year from the 'Survey' column, covert to a number, and create a new 'Year' variable with these values\n  mutate(Year = as.numeric(substr(Survey, start = 8, stop = 9))) |&gt;\n    \n  # Covert the two digit year into a four digit year and overwrite the 'Year' column\n  mutate(Year = ifelse(Year &gt; 25, Year + 1900, Year + 2000)) |&gt;\n    \n  # Extract the first 7 digits from the 'Survey' column and create a new 'Measurement' variable with these values\n  mutate(Measurement = substr(Survey, start = 1, stop = 7))\n  return(long_data_updated)\n}\n\n\n\n\nThis function does step 5 from the previous section by adding the state variable to the county tibble. It will be used within a later function where we will split datasets into county and state data.\n\nstate_function &lt;- function(county_tibble){\n  new_county_tibble &lt;- county_tibble |&gt;\n  mutate(State = substr(area_name, start = nchar(area_name)-1, stop = nchar(area_name)))\n  return(new_county_tibble)\n}\n\n\n\n\nThis function creates the division variable within the state tibble. It will also be used in the next function we create.\n\ndivision_function &lt;- function(noncounty_tibble) {\n  noncounty_tibble_updated &lt;- noncounty_tibble |&gt;\n  mutate(Division = ifelse(area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\"), \"Division 1 (New England)\",\n                           ifelse(area_name %in% c(\"NEW JERSEY\", \"NEW YORK\", \"PENNSYLVANIA\"), \"Division 2 (Middle Atlantic)\",\n                                  ifelse(area_name %in% c(\"ILLINOIS\", \"INDIANA\", \"MICHIGAN\", \"OHIO\", \"WISCONSIN\"), \"Division 3 (East North Central)\",\n                                         ifelse(area_name %in% c(\"IOWA\", \"KANSAS\", \"MINNESOTA\", \"MISSOURI\", \"NEBRASKA\", \"NORTH DAKOTA\", \"SOUTH DAKOTA\"), \"Division 4 (West North Central)\",\n                                                ifelse(area_name %in% c(\"DELAWARE\", \"FLORIDA\", \"GEORGIA\", \"MARYLAND\", \"NORTH CAROLINA\", \"SOUTH CAROLINA\", \"VIRGINIA\", \"DISTRICT OF COLUMBIA\", \"District of Columbia\", \"WEST VIRGINIA\"), \"Division 5 (South Atlantic)\",\n                                                       ifelse(area_name %in% c(\"ALABAMA\", \"KENTUCKY\", \"MISSISSIPPI\", \"TENNESSEE\"), \"Division 6 (East South Central)\",\n                                                              ifelse(area_name %in% c(\"ARKANSAS\", \"LOUISIANA\", \"OKLAHOMA\", \"TEXAS\"), \"Division 7 (West South Central)\",\n                                                                     ifelse(area_name %in% c(\"ARIZONA\", \"COLORADO\", \"IDAHO\", \"MONTANA\", \"NEVADA\", \"NEW MEXICO\", \"UTAH\", \"WYOMING\"), \"Division 8 (Mountain)\",\n                                                                            ifelse(area_name %in% c(\"ALASKA\", \"CALIFORNIA\", \"HAWAII\", \"OREGON\", \"WASHINGTON\"), \"Division 9 (Pacific)\", \"ERROR\"))))))))))\n  return(noncounty_tibble_updated)\n}\n\n\n\n\nThis function does step 4-6 of the data processing phase. It splits the main dataset into a state tibble and a county tibble. Next, it calls both of the previous functions written within each respective dataset to add the necessary variables.\n\ncreate_datasets &lt;- function(long_data) {\n  county_indices &lt;- grep(pattern = \", \\\\w\\\\w\", long_data$area_name)\n  noncounty_tibble &lt;- long_data[-county_indices, ]\n  class(noncounty_tibble) &lt;- c(\"state\", class(noncounty_tibble))\n  county_tibble &lt;- long_data[county_indices, ]\n  class(county_tibble) &lt;- c(\"county\", class(county_tibble))\n  final_county_tibble &lt;- state_function(county_tibble)\n  final_noncounty_tibble &lt;- division_function(noncounty_tibble)\n  return(list(county = final_county_tibble, noncounty = final_noncounty_tibble))\n}\n\n\n\n\nThis wrapper function takes all of the functions we made previously and combines them into one. It will allow us to perform all of the functions simultaneously given the URL to a dataset.\n\nmy_wrapper &lt;- function(url, value = \"Enrollment Value\"){\nresult &lt;- read_csv(url) |&gt;\nlong_format_conversion(value = value) |&gt;\nsurvey_function() |&gt;\ncreate_datasets()\nreturn(result)\n}\n\n\n\n\nHere we will call this wrapper function on the two different URL’s we were given.\n\ntibble1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntibble2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThis function will combine two different county datasets with each other and combine different state datasets with each other. It will return a list with two items: the combined state data frame and the combined county data frame.\n\ncombine_tibbles &lt;- function (tibble1, tibble2){\n  county_df &lt;- as.data.frame(bind_rows(tibble1[[1]], tibble2[[1]]))\n  noncounty_df &lt;- as.data.frame(bind_rows(tibble1[[2]], tibble2[[2]]))\n  return(list(county_df, noncounty_df))\n}\n\n\n\n\nHere we will combine the two tibbles generated from the wrapper functions.\n\ndf &lt;- combine_tibbles(tibble1, tibble2)\n\n\n\n\nThis function will create a new plot for the state data frame that will group by the division, create a mean for whatever value is given, and then plot the year vs. value what is given.\n\nplot.state &lt;- function(df, value = \"Enrollment Value\") {\n   updated_df &lt;- df |&gt;\n    filter(Division != \"ERROR\") |&gt;\n    group_by(Division, Year) |&gt;\n    summarize(mean_stat = mean(get(value)))\n  g &lt;- ggplot(updated_df, aes(x = Year, y = mean_stat, color = Division)) \n    g + geom_line() + labs(y = paste(\"Mean\", value)) + ggtitle(paste(\"Changes in\", value, \"Over Years\"))\n}\n\n\n\n\nThis function will create a new plot for the county dataset and is very flexible. You can input different states, number of observations, and order of sorting. The final plot will look at the change in whatever value is specified over time.\n\nplot.county &lt;- function(df, state = \"AL\", order = \"top\", number = 5, value = \"Enrollment Value\") {\n  df_updated &lt;- df |&gt;\n    filter(State == state) |&gt;\n    group_by(area_name) |&gt;\n    summarize(county_mean_stat = mean(get(value)))\n   if(order == \"top\") {\n    df_updated &lt;- df_updated |&gt; arrange(desc(county_mean_stat))\n  } else if(order == \"bottom\") {\n    df_updated &lt;- df_updated |&gt; arrange(county_mean_stat)\n  } else {\n    return(\"Invalid order value\")\n  }\n  df_updated &lt;- df_updated |&gt; slice(1:number)\n  df_plot &lt;- left_join(df_updated, df, by = \"area_name\")\n  ggplot(df_plot, aes(x = Year, y = get(value), color = area_name)) +\n    geom_line() +\n    labs(y = paste(value)) +\n    ggtitle(paste(\"Change in\", value, \"Over Time\"))\n}"
  },
  {
    "objectID": "ST503Project1.html#put-it-all-together",
    "href": "ST503Project1.html#put-it-all-together",
    "title": "ST 558 Project 1",
    "section": "",
    "text": "In this section, we will run our functions we made on different URL’s in order to take the raw data, put it in the correct format, and then display plots for different states, divisions, and number of observations.\n\n\nHere we will process the data from the first 2 enrollment URL’s given.\n\n# Run the function on enrollment URL 1\nenroll1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", value = \"Enrollment Value\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Run the function on enrollment URL 2\nenroll2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", value = \"Enrollment Value\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nThis will combine the state data frame with the other state data frame, and the county data frame with the other county data frame.\n\nenroll_combo &lt;- combine_tibbles(enroll1, enroll2)\n\n\n\n\nHere we will plot the state data frame for the combined data using our plot.state function.\n\nplot.state(enroll_combo[[2]])\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\nWe will now plot the county data and give it 4 different inputs to see the flexibility of our plot.county function that we created.\n\n# Specify the state to \"NC\", the group to top, and the number to 20\nplot.county(enroll_combo[[1]], state = \"NC\", order = \"top\", number = 20)\n\n\n\n\n\n\n\n# Specify the state to \"SC\", the group to bottom, and the number to 7\nplot.county(enroll_combo[[1]], state = \"SC\", order = \"bottom\", number = 7)\n\n\n\n\n\n\n\n# Do not specify anything\nplot.county(enroll_combo[[1]])\n\n\n\n\n\n\n\n# Specify the state to \"PA\", the group to top, and the number to 8\nplot.county(enroll_combo[[1]], state = \"PA\", order = \"top\", number = 8)\n\n\n\n\n\n\n\n\n\n\n\nRun the data processing function\nIn this step we will read in 4 more URL’s to obtain different datasets and we will test our wrapper function on these.\n\nurl1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST015171N1, PST015171N2, PST015172N1, PST015172...\ndbl (20): PST015171F, PST015171D, PST015172F, PST015172D, PST015173F, PST015...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST025182N1, PST025182N2, PST025183N1, PST025183...\ndbl (20): PST025182F, PST025182D, PST025183F, PST025183D, PST025184F, PST025...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl3 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST035191N1, PST035191N2, PST035192N1, PST035192...\ndbl (20): PST035191F, PST035191D, PST035192F, PST035192D, PST035193F, PST035...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nurl4 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\")\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST045200N1, PST045200N2, PST045201N1, PST045201...\ndbl (20): PST045200F, PST045200D, PST045201F, PST045201D, PST045202F, PST045...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nRun the data combining function to put these data sets into one object\nWe now will combine the data of 4 URL’s that we read in and put it into one larger object. We will use the combine_tibbles function for this.\n\n# Combine URLs 1 and 2\ncombo1 &lt;- combine_tibbles(url1, url2)\n\n# Combine URLs 3 and 4\ncombo2 &lt;- combine_tibbles(url3, url4)\n\n# Combine all 4 URLs\nurl_combo &lt;- combine_tibbles(combo1, combo2)\n\nUse the plot function on the state data frame\nWe will now test out the plot.state function on the new state data frame of the combined data.\n\nplot.state(url_combo[[2]])\n\n`summarise()` has grouped output by 'Division'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nUse the plot function on the county data frame\nWe will now test the plot.county function with different inputs on our combined county data frame.\n\n# Specify the state to \"CA\", the group to top, and the number to 15\nplot.county(url_combo[[1]], state = \"CA\", order = \"top\", number = 15)\n\n\n\n\n\n\n\n# Specify the state to \"TX\", the group to top, and the number to 4\nplot.county(url_combo[[1]], state = \"TX\", order = \"top\", number = 4)\n\n\n\n\n\n\n\n# Do not specify anything\nplot.county(url_combo[[1]])\n\n\n\n\n\n\n\n# Specify the state to \"NY\", the group to top, and the number to 10\nplot.county(url_combo[[1]], state = \"NY\", order = \"top\", number = 10)"
  }
]